{"version":3,"sources":["to-do2.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","state","newItem","list","todoValue","id","Date","now","value","this","push","setState","updatedlist","filter","item","input","src","logo","width","height","alt","className","type","placeholder","required","onChange","e","updateInput","target","onClick","addItem","disabled","length","map","key","deleteItem","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6FAAAA,EAAOC,QAAU,IAA0B,oC,8MCgG5BC,G,wDA1Fb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,QAAS,GACTC,KAAM,IAJS,E,oDAQXC,GACN,GAAkB,KAAdA,EAAkB,CACpB,IAAMF,EAAU,CACdG,GAAIC,KAAKC,MACTC,MAAOJ,GAEHD,EAAI,YAAOM,KAAKR,MAAME,MAC5BA,EAAKO,KAAKR,GAEVO,KAAKE,SAAS,CACZR,KAAKA,EACLD,QAAS,Q,iCAKJG,GACT,IACMO,EADI,YAAOH,KAAKR,MAAME,MACHU,QAAO,SAAAC,GAAI,OAAIA,EAAKT,KAAOA,KACpDI,KAAKE,SAAS,CAAER,KAAMS,M,kCAGZG,GACVN,KAAKE,SAAS,CAAET,QAASa,M,+BAIjB,IAAD,OACP,OACE,6BACE,yBAAKC,IAAKC,IAAMC,MAAM,MAAMC,OAAO,MAAMC,IAAI,OAAOC,UAAU,SAC9D,wBAAIA,UAAU,aAAd,YACA,yBAAKA,UAAU,aAAf,kBAEE,6BACA,2BACEC,KAAK,OACLD,UAAU,aACVE,YAAY,eACZC,UAAQ,EACRhB,MAAOC,KAAKR,MAAMC,QAClBuB,SAAU,SAAAC,GAAC,OAAI,EAAKC,YAAYD,EAAEE,OAAOpB,UAE3C,4BACEa,UAAU,UACVQ,QAAS,kBAAM,EAAKC,QAAQ,EAAK7B,MAAMC,UACvC6B,UAAWtB,KAAKR,MAAMC,QAAQ8B,QAHhC,YAOA,yBAAKX,UAAU,QACb,4BAEGZ,KAAKR,MAAME,KAAK8B,KAAI,SAAAnB,GACnB,OACE,wBAAIoB,IAAKpB,EAAKT,IAEXS,EAAKN,MACN,4BACEa,UAAU,MACVQ,QAAS,kBAAM,EAAKM,WAAWrB,EAAKT,MAFtC,cAUN,0CAGE,4BAAQgB,UAAU,OAAlB,mB,GAjFEe,IAAMC,YCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c62e0779.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/to-do2.43a3784f.jpg\";","import React from 'react';\r\nimport logo from './to-do2.jpg';\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      newItem: \"\",\r\n      list: []\r\n    };\r\n  }\r\n\r\n  addItem(todoValue) {\r\n    if (todoValue !== \"\") {\r\n      const newItem = {\r\n        id: Date.now(),\r\n        value: todoValue,\r\n      };\r\n      const list = [...this.state.list];\r\n      list.push(newItem);\r\n\r\n      this.setState({\r\n        list:list,\r\n        newItem: \"\"\r\n      });\r\n    }\r\n  }\r\n\r\n  deleteItem(id) {\r\n    const list = [...this.state.list];\r\n    const updatedlist = list.filter(item => item.id !== id);\r\n    this.setState({ list: updatedlist });\r\n  }\r\n\r\n  updateInput(input) {\r\n    this.setState({ newItem: input });\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <img src={logo} width=\"100\" height=\"100\" alt=\"logo\" className=\"logo\" />\r\n        <h1 className=\"app-title\">ToDo App</h1>\r\n        <div className=\"container\">\r\n          Add an Item....\r\n          <br />\r\n          <input\r\n            type=\"text\"\r\n            className=\"input-text\"\r\n            placeholder=\"Write a Todo\"\r\n            required\r\n            value={this.state.newItem}\r\n            onChange={e => this.updateInput(e.target.value)}\r\n          />\r\n          <button\r\n            className=\"add-btn\"\r\n            onClick={() => this.addItem(this.state.newItem)}\r\n            disabled={!this.state.newItem.length}\r\n          >\r\n            Add Todo\r\n          </button>\r\n          <div className=\"list\">\r\n            <ul>\r\n\r\n              {this.state.list.map(item => {\r\n                return (\r\n                  <li key={item.id}>\r\n                    \r\n                    {item.value}\r\n                    <button\r\n                      className=\"btn\"\r\n                      onClick={() => this.deleteItem(item.id)}\r\n                    >\r\n                      Delete\r\n                    </button>\r\n                  </li>\r\n                );\r\n              })}\r\n\r\n              <li>\r\n                {/* <input type=\"checkbox\" name=\"\" id=\"\" /> */}\r\n                Go to bed!!\r\n                <button className=\"btn\">Delete</button>\r\n              </li>\r\n\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}